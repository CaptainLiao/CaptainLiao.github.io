<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[gulp 搭建个人工作流：文件注入、热启动、跨域]]></title>
      <url>/2017/04/22/2017-4-22/gulp%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%B7%A5%E4%BD%9C%E6%B5%81%EF%BC%9A%E6%96%87%E4%BB%B6%E6%B3%A8%E5%85%A5%E3%80%81%E7%83%AD%E5%90%AF%E5%8A%A8%E3%80%81%E8%B7%A8%E5%9F%9F/</url>
      <content type="html"><![CDATA[<p>个人比价推崇前后端分离的开发方式，大家伙各司其职，只需通过 API 进行交流，不仅避免了沟通上的成本，更提升了开发效率。而在前端开发工作中，许多需求和问题是相似的，所以我们的开发模式往往是雷同的，是否能够总结出一套通用的模式呢？<br><a id="more"></a><br>（备份一个webpack的中文网站：<a href="https://angular.cn/docs/ts/latest/guide/webpack.html）" target="_blank" rel="external">https://angular.cn/docs/ts/latest/guide/webpack.html）</a></p>
<h3 id="日常前端开发的处境"><a href="#日常前端开发的处境" class="headerlink" title="日常前端开发的处境"></a>日常前端开发的处境</h3><p>1、 开发流程相似<br>​ 前端开发工作包含哪些？html、css、js，对应的工程目录也相似，每次重新创建都要耗费一些时间。</p>
<p>2、 需求更改频繁<br>​ 开发们都推崇两个字“复用”，那么是什么阻碍了代码的复用？答：产品经理的需求变更。虽然有些搞笑的成分，但毋庸置疑，前端开发中需求频繁更改是非常常见的，我们可不想因为一条样式修改而找遍所有文件。</p>
<p>3、 如何跨域<br>​ 如何跨域是每个前端必须面对的，最优的解决方案是服务器的反向代理来实现，而多数前端都没有这方面的经验。幸好，在开发环境中，我们可以利用 node 或者 gulp 来解决跨域问题。</p>
<p>​ 之前我的一篇博客介绍了利用node.js进行跨域访问：<a href="http://www.cnblogs.com/fayin/p/6628150.html" target="_blank" rel="external">http://www.cnblogs.com/fayin/p/6628150.html</a></p>
<p>​ 今天，我将介绍用gulp搭建工作流，并带来第二种前端跨域的方式。</p>
<p>点击：这里查看完整代码</p>
<p>gulp 搭建工作流</p>
<p>首先介绍下安装依赖，明确有哪些task：</p>
<p>gulp-load-plugins：用来加载插件，避免我们再头部声明一堆插件，做到想用就用<br>less：用于编译 .less文件<br>autoprefixer：自动添加css前缀<br>babel：es6 编译成 es5<br>uglify：JS压缩<br>minify：CSS压缩<br>rename：重命名<br>sourcemaps：资源映射<br>concat：合并文件<br>del：删除文件、文件夹<br>inject：文件注入<br>notify：提示信息<br>browser-sync：热启动<br>http-proxy-middleware：配合browser-sync进行跨域<br>changed：只有发生了改变的文件才能进入流中<br>sequence：让task按顺序完成<br>rev：添加MD5<br>watch：监听文件变化<br>gulpfile.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * gulp mask list</div><div class="line"> *</div><div class="line"> * gulp-load-plugins</div><div class="line"> *</div><div class="line"> * babel, less, uglify, browser-sync, del, autoprefixer, concat, minifyCss, rename</div><div class="line"> * sourcemaps, inject, notify</div><div class="line"> *</div><div class="line"> */</div><div class="line"></div><div class="line">const APIURL = &apos;http://192.168.1.30:6760&apos;;</div><div class="line">const ISPROXY = false;</div><div class="line"></div><div class="line">const DEV_PRO = false;</div><div class="line"></div><div class="line"></div><div class="line">const</div><div class="line">    fs   = require(&apos;fs&apos;),</div><div class="line">    path = require(&apos;path&apos;),</div><div class="line">    gulp = require(&apos;gulp&apos;),</div><div class="line">    gulpLoadPlugins = require(&apos;gulp-load-plugins&apos;),</div><div class="line">    del = require(&apos;del&apos;),</div><div class="line">    browserSync = require(&apos;browser-sync&apos;).create(),</div><div class="line">    reload = browserSync.reload,</div><div class="line">    plugins = gulpLoadPlugins(),</div><div class="line">    sequence = require(&apos;gulp-sequence&apos;),</div><div class="line">    gulpCopy = require(&apos;gulp-file-copy&apos;),</div><div class="line">    proxy = require(&apos;http-proxy-middleware&apos;),</div><div class="line">    fileinclude = require(&apos;gulp-file-include&apos;),</div><div class="line">    pngquant = require(&apos;imagemin-pngquant&apos;),</div><div class="line">    mozjpeg = require(&apos;imagemin-mozjpeg&apos;),</div><div class="line">    merge = require(&apos;merge-stream&apos;);</div><div class="line"></div><div class="line">const DIST = &apos;dist&apos;,</div><div class="line">    SRC = &apos;dist&apos;;</div><div class="line"></div><div class="line">const getFolders = (dir)=&gt; &#123;</div><div class="line">    return fs.readdirSync(dir)</div><div class="line">        .filter((file)=&gt; &#123;</div><div class="line">            return fs.statSync(path.join(dir, file)).isDirectory();</div><div class="line">        &#125;)</div><div class="line">&#125;;</div><div class="line">const getError = function(err) &#123;</div><div class="line">    console.log(err.toString());</div><div class="line">    this.emit(&apos;end&apos;);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line">gulp.task(&apos;clean&apos;, function () &#123;</div><div class="line">   return del([&apos;dist/**/*&apos;])</div><div class="line">&#125;);</div><div class="line"></div><div class="line">gulp.task(&apos;clean-css&apos;, function () &#123;</div><div class="line">    return del([&apos;dist/css/**/*.*&apos;])</div><div class="line">&#125;);</div><div class="line"></div><div class="line">gulp.task(&apos;clean-js&apos;, function () &#123;</div><div class="line">    return del([&apos;dist/js/*.*&apos;])</div><div class="line">&#125;);</div><div class="line"></div><div class="line">gulp.task(&apos;include&apos;, function () &#123;</div><div class="line">   return gulp.src(&apos;src/*.html&apos;)</div><div class="line">       .pipe(plugins.changed(DIST))</div><div class="line">       .pipe(fileinclude(&#123;</div><div class="line">           prefix: &apos;@@&apos;,</div><div class="line">           basepath: &apos;@file&apos;</div><div class="line">       &#125;))</div><div class="line">       .pipe(plugins.debug(&#123;title: &apos;文件引入:&apos;&#125;))</div><div class="line">       .pipe(gulp.dest(&apos;dist&apos;))</div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line">gulp.task(&apos;css&apos;, ()=&gt; &#123;</div><div class="line">    let commonStyle = gulp.src(&apos;src/less/*.less&apos;,&#123;base: &apos;src/less&apos;&#125;)</div><div class="line">        .pipe(plugins.changed(DIST, &#123;extension: &apos;.css&apos;&#125;))</div><div class="line">        //.pipe(plugins.watch(&apos;src/less/*.less&apos;))</div><div class="line">        .pipe(plugins.sourcemaps.init())</div><div class="line">        .pipe(plugins.less())</div><div class="line">        .on(&apos;error&apos;, getError)</div><div class="line">        .pipe(plugins.autoprefixer(&#123;</div><div class="line">            browsers: [&apos;last 4 version&apos;,&apos;Android &gt;= 4.0&apos;],</div><div class="line">            cascade: true,</div><div class="line">            remove: true</div><div class="line">        &#125;))</div><div class="line">        .pipe(plugins.concat(&apos;common.css&apos;))</div><div class="line">        .pipe(plugins.minifyCss())</div><div class="line">        .pipe(plugins.rename(&#123;suffix: &apos;.min&apos;&#125;))</div><div class="line">        //.pipe(plugins.rev())    // 添加md5</div><div class="line">        .pipe(plugins.sourcemaps.write(&apos;.&apos;))</div><div class="line">        .pipe(plugins.debug(&#123;title: &apos;编译css:&apos;&#125;))</div><div class="line">        .pipe(gulp.dest(&apos;dist/css&apos;))</div><div class="line">        .pipe(browserSync.stream(&#123;match: &apos;**/*.css&apos;&#125;));</div><div class="line">    // .pipe(gulp.rev.manifest())</div><div class="line">    // .pipe(gulp.dest(&apos;dist/rev&apos;))</div><div class="line">    let lessPath = &apos;src/less&apos;;</div><div class="line">    let folders = getFolders(lessPath);</div><div class="line"></div><div class="line">    let folderStyle = folders.map((folder)=&gt; &#123;</div><div class="line">        let newPath = path.join(lessPath, folder, &apos;/*.less&apos;);</div><div class="line">        return gulp.src(newPath)</div><div class="line">            .pipe(plugins.changed(DIST, &#123;extension: &apos;.css&apos;&#125;))</div><div class="line">            //.pipe(plugins.watch(newPath))</div><div class="line">            .pipe(plugins.sourcemaps.init())</div><div class="line">            .pipe(plugins.less())</div><div class="line">            .pipe(plugins.autoprefixer(&#123;</div><div class="line">                browsers: [&apos;last 4 version&apos;,&apos;Android &gt;= 4.0&apos;],</div><div class="line">                cascade: true,</div><div class="line">                remove: true</div><div class="line">            &#125;))</div><div class="line">            .pipe(plugins.concat(folder+&apos;.css&apos;))</div><div class="line">            .pipe(plugins.minifyCss())</div><div class="line">            .pipe(plugins.rename(&#123;suffix: &apos;.min&apos;&#125;))</div><div class="line">            //.pipe(plugins.rev())    // 添加md5</div><div class="line">            .pipe(plugins.sourcemaps.write(&apos;.&apos;))</div><div class="line">            .pipe(plugins.debug(&#123;title: &apos;编译foldercss:&apos;&#125;))</div><div class="line">            .pipe(gulp.dest(&apos;dist/css/&apos;+folder))</div><div class="line">            .pipe(browserSync.stream(&#123;match: &apos;**/*.css&apos;&#125;));</div><div class="line">    &#125;);</div><div class="line">    return merge(commonStyle, folderStyle);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">gulp.task(&apos;es6ToEs5&apos;, function () &#123;</div><div class="line">    return gulp.src(&apos;src/js/**/*.js&apos;)</div><div class="line">        .pipe(plugins.changed(DIST, &#123;extension: &apos;.js&apos;&#125;))</div><div class="line">        .pipe(plugins.sourcemaps.init())</div><div class="line">        .pipe(plugins.babel(&#123;</div><div class="line">            presets: [&apos;es2015&apos;]</div><div class="line">        &#125;))</div><div class="line">        .on(&apos;error&apos;, getError)</div><div class="line">        //.pipe(plugins.concat(&apos;main.js&apos;))</div><div class="line">        .pipe(plugins.uglify())</div><div class="line">        .pipe(plugins.rename(&#123;suffix: &apos;.min&apos;&#125;))</div><div class="line">        //.pipe(plugins.rev())</div><div class="line">        .pipe(plugins.sourcemaps.write(&apos;.&apos;))</div><div class="line">        .pipe(plugins.debug(&#123;title: &apos;编译js:&apos;&#125;))</div><div class="line">        .pipe(gulp.dest(&apos;dist/js&apos;))</div><div class="line">        .pipe(browserSync.stream(&#123;match: &apos;**/*.js&apos;&#125;));</div><div class="line">&#125;);</div><div class="line"></div><div class="line">gulp.task(&apos;rev&apos;,[&apos;css&apos;],function() &#123;</div><div class="line">    return gulp.src([&apos;dist/rev/rev-manifest.json&apos;,&apos;dist/*.html&apos;])  //获取rev-manifest.json和要替换的html文件</div><div class="line">        .pipe(plugins.revCollector(&#123;</div><div class="line">            replaceReved: true      //根据rev-manifest.json的规则替换html里的路径，由于替换是根据rev-manifest.json规则来的，所以一定要先生成这个文件再进行替换</div><div class="line">        &#125;))</div><div class="line">        .pipe(gulp.dest(&apos;dist&apos;))</div><div class="line">        .pipe(browserSync.stream(&#123;match: &apos;**/*.css&apos;&#125;));</div><div class="line">        //.pipe(plugins.notify(&apos;md5 success!!!!&apos;))</div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line">gulp.task(&apos;copy&apos;, function () &#123;</div><div class="line">    let start = &apos;src/lib/*.*&apos;,</div><div class="line">        start2 = &apos;src/images/**/*.*&apos;;</div><div class="line">    let copyLib = gulp.src(start)</div><div class="line">        .pipe(plugins.changed(DIST))</div><div class="line">        .pipe(gulpCopy(&apos;dist/lib&apos;, &#123;</div><div class="line">            start: &apos;src/lib&apos;</div><div class="line">        &#125;));</div><div class="line"></div><div class="line">    let copyImages = gulp.src(start2)</div><div class="line">        .pipe(plugins.changed(DIST))</div><div class="line">        .pipe(plugins.imagemin(</div><div class="line">            [pngquant(), mozjpeg()],</div><div class="line">            &#123;verbose: true&#125;</div><div class="line">        ))</div><div class="line">        .pipe(gulp.dest(&apos;dist/images&apos;));</div><div class="line">    return merge(copyLib, copyImages)</div><div class="line">&#125;);</div><div class="line"></div><div class="line">gulp.task(&apos;injectFile&apos;, function () &#123;</div><div class="line">   let target = [&apos;src/*.html&apos;,&apos;!src/_head.html&apos;],</div><div class="line">       target2 = [&apos;dist/lib/*.js&apos;, &apos;dist/js/*.js&apos;, &apos;dist/css/*.css&apos;],</div><div class="line">       sources = gulp.src(target2, &#123;&apos;read&apos;: false&#125;);</div><div class="line">   return gulp.src(target)</div><div class="line">       .pipe(plugins.changed(DIST))</div><div class="line">       .pipe(fileinclude(&#123;</div><div class="line">           prefix: &apos;@@&apos;,</div><div class="line">           basepath: &apos;@file&apos;</div><div class="line">       &#125;))</div><div class="line">       .pipe(plugins.inject(sources, &#123;relative: true&#125;))</div><div class="line">       .pipe(plugins.debug(&#123;title: &apos;注入:&apos;&#125;))</div><div class="line">       .pipe(gulp.dest(&apos;dist&apos;))</div><div class="line">       .pipe(browserSync.stream(&#123;match: &apos;**/*.html&apos;&#125;));</div><div class="line">       //.pipe(plugins.notify(&apos;inject success&apos;))</div><div class="line">&#125;);</div><div class="line"></div><div class="line">gulp.task(&apos;watch-css&apos;, function (callback) &#123;</div><div class="line">    sequence(&apos;rev&apos;, &apos;injectFile&apos;, callback)</div><div class="line">&#125;);</div><div class="line"></div><div class="line">gulp.task(&apos;watch-js&apos;, function (callback) &#123;</div><div class="line">    sequence(&apos;es6ToEs5&apos;, &apos;injectFile&apos;, callback)</div><div class="line">&#125;);</div><div class="line"></div><div class="line">gulp.task(&apos;del-maps&apos;, function () &#123;</div><div class="line">    return del([&apos;dist/**/*.map&apos;]);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">gulp.task(&apos;html-watch&apos;, [&apos;injectFile&apos;], function (done) &#123;</div><div class="line">    browserSync.reload();</div><div class="line">    done();</div><div class="line">&#125;);</div><div class="line"></div><div class="line">gulp.task(&apos;server&apos;, function() &#123;</div><div class="line">    const aipProxy = proxy(&apos;/api&apos;, &#123;</div><div class="line">        target: APIURL,</div><div class="line">        changeOrigin: true,</div><div class="line">        ws: true</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    if (!ISPROXY) &#123;</div><div class="line">        browserSync.init(&#123;</div><div class="line">            // files:&apos;**&apos;,</div><div class="line">            server: &#123;</div><div class="line">                baseDir: &apos;./&apos;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;else &#123;</div><div class="line">        browserSync.init(&#123;</div><div class="line">            server: &#123;</div><div class="line">                baseDir: &apos;./&apos;,</div><div class="line">                middleware: [aipProxy]</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    gulp.watch([&apos;src/*.html&apos;], [&apos;injectFile&apos;]);</div><div class="line">    gulp.watch([&apos;src/images/**/*.*&apos;], [&apos;copy&apos;]);</div><div class="line">    gulp.watch([&apos;src/less/**/*&apos;], [&apos;watch-css&apos;]);</div><div class="line">    gulp.watch([&apos;src/js/**/*.js&apos;, &apos;src/lib/*.*&apos;], [&apos;watch-js&apos;]);</div><div class="line">    gulp.watch([&apos;dist/*.html&apos;]).on(&apos;change&apos;, browserSync.reload);</div><div class="line">    gulp.watch([&apos;src/**/**&apos;])</div><div class="line">        .on(&apos;change&apos;, function (event) &#123;</div><div class="line">            if(event.type == &apos;deleted&apos;) &#123;</div><div class="line">                let _path = event.path,</div><div class="line">                    cssPath = _path.replace(/src\\less/, &apos;dist\\css&apos;);</div><div class="line">                console.log(cssPath);</div><div class="line">                if(path.extname(_path) === &apos;.less&apos;) &#123;</div><div class="line">                    del(path.dirname(cssPath)+&apos;/*.*&apos;);</div><div class="line">                    sequence(&apos;rev&apos;, &apos;injectFile&apos;);</div><div class="line">                &#125;else &#123;</div><div class="line">                    del(_path.replace(/src/, &apos;dist&apos;))</div><div class="line">                &#125;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        .on(&apos;error&apos;, function (err) &#123;</div><div class="line">            console.log(err)</div><div class="line">        &#125;);</div><div class="line">    //browserSync.watch(&apos;./src/**/*.*&apos;).on(&apos;change&apos;,reload);</div><div class="line">    //browserSync.watch(&apos;./dist/**/*&apos;).on(&apos;change&apos;,reload);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">gulp.task(&apos;dev&apos;, sequence(&apos;clean&apos;, [&apos;rev&apos;, &apos;es6ToEs5&apos;,&apos;copy&apos;], &apos;injectFile&apos;, &apos;server&apos;));</div><div class="line"></div><div class="line"></div><div class="line">gulp.task(&apos;build-pro&apos;, sequence(&apos;clean&apos;,[&apos;rev&apos;, &apos;es6ToEs5&apos;, &apos;copy&apos;],&apos;injectFile&apos;, &apos;del-maps&apos;));</div></pre></td></tr></table></figure></p>
<p>目录</p>
]]></content>
      
        
        <tags>
            
            <tag> gulp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用vuex 解决模块间传值问题]]></title>
      <url>/2017/04/22/%E4%BD%BF%E7%94%A8vuex-%E8%A7%A3%E5%86%B3%E6%A8%A1%E5%9D%97%E9%97%B4%E4%BC%A0%E5%80%BC%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>二月的第四个周末，在家。受寒流的影响，深圳天气持续冰冻了好几天，天冷人就变得懒动，迷迷糊糊睡到了快十点，终于在饥饿的催促下起床。</p>
<p>和妹子吃完粥后，百无聊赖。透过窗户，发现太阳依旧没有露头的打算，我们也就失去了外出的兴致。</p>
<p>在看电影、打Dota、撸代码间来回，犹豫不决，终于还是下决心继续学习VUE。<br>仿照 conde.js 官网写的一个demo，目前已经基本可用，但始终缺少登录页，没有用户权限管理，于是开撸……<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;div id=&quot;login&quot;&gt;</div><div class="line">    &lt;c-header&gt;&lt;/c-header&gt;</div><div class="line">    &lt;c-form&gt;&lt;/c-form&gt;</div><div class="line">    &lt;p class=&quot;content-block&quot;&gt;&lt;a href=&quot;javascript:;&quot; @click=showState class=&quot;button button-fill button-success&quot;&gt;登录&lt;/a&gt;&lt;/p&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div></pre></td></tr></table></figure></p>
<p>外观大概是这样的：</p>
<p><img src="/img/2.png" alt=""></p>
<p>两个输入项通过 c-form 组件导入</p>
<p>由于没有登录接口调用，初步想法是：点击登录，将c-from组件输入的值（用户名和密码）保存在 sessionStorage 中，通过判断 sessionStorage 是否保存了用户信息，来决定用户的操作权限。</p>
<p>现在问题来了——点击登录，如何取得 c-form 组件中的输入值？</p>
<p>最直接的想法就是通过子组件派生事件，父组件监听触发。转念一想，何不使用vuex来进行管理呢？正好之前从来没有认真对待过它。</p>
<p>LOL……</p>
<p>坑坑坑，我踩踩踩</p>
<p>终于，总结出使用 vuex 的三大步骤：</p>
<p>步骤1：安装和创建</p>
<p>安装 vuex：npm i vuex –save</p>
<p>创建 store.js，把基本格式写好：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">import Vue from &apos;vue&apos;</div><div class="line">import Vuex from &apos;vuex&apos;</div><div class="line">// 首先声明一个状态 state</div><div class="line">const state = &#123;</div><div class="line">   msg: &apos;&apos;</div><div class="line">&#125;</div><div class="line">// 然后给 actions 注册一个事件处理函数，当这个函数被触发时，将状态提交到 mutaions中处理</div><div class="line">const actions = &#123;</div><div class="line">   saveName(&#123;commit&#125;, msg) &#123;</div><div class="line">       commit(&apos;saveMsg&apos;, msg)    // 提交到mutations中处理    </div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line">// 更新状态</div><div class="line">const mutations = &#123;</div><div class="line">    saveMsg(state, msg) &#123;</div><div class="line">       state.msg = msg;</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line">// 获取状态信息</div><div class="line">const getter = &#123;</div><div class="line">   showState(state) &#123;</div><div class="line">       console.log(state.msg)</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">// 下面这个相当关键了，所有模块，记住是所有，注册才能使用</div><div class="line">export default new Vuex.Store&#123;</div><div class="line">   state,</div><div class="line">   getter,</div><div class="line">   mutations,</div><div class="line">   actions</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>步骤2：在子组件中使用（保存输入）</p>
<p>具体到我这里，是在c-form中使用它：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">    &lt;div&gt;</div><div class="line">        &lt;input type=&quot;text&quot; @blur=saveName(username) v-model=&quot;username&quot; placeholder=&quot;Your name&quot;&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div><div class="line"></div><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">  // 引入mapActions，很重要</div><div class="line">  import &#123; mapActions &#125; from &apos;vuex&apos;</div><div class="line">  export default &#123;</div><div class="line">    data() &#123;</div><div class="line">      return &#123;</div><div class="line">        username:&apos;&apos;,</div><div class="line">        password: &apos;&apos;</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    methods: &#123;</div><div class="line">      ...mapActions(&#123;</div><div class="line">        // 在input 的blur 事件中触发回调，并将输入值作为参数返回到store中</div><div class="line">        saveName: &apos;saveName&apos; </div><div class="line">      &#125;)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>步骤3：获取在步骤2 中的输入值（获取state）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;div id=&quot;login&quot;&gt;</div><div class="line">    &lt;c-header&gt;&lt;/c-header&gt;</div><div class="line">    &lt;c-form&gt;&lt;/c-form&gt;</div><div class="line">    &lt;p class=&quot;content-block&quot;&gt;&lt;a href=&quot;javascript:;&quot; @click=showState class=&quot;button button-fill button-success&quot;&gt;登录&lt;/a&gt;&lt;/p&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">// 引入mapGtters，很重要</div><div class="line">import &#123; mapGetters &#125; from &apos;vuex&apos;</div><div class="line">  export default &#123;</div><div class="line">    methods: &#123;</div><div class="line">      ...mapGetters([</div><div class="line">        // 在store.js 中注册的getters</div><div class="line">        &apos;showState&apos;</div><div class="line">      ])</div><div class="line">    &#125;,</div><div class="line">    components: &#123;</div><div class="line">      &quot;c-form&quot;: require(&apos;../components/form.vue&apos;),</div><div class="line">      &quot;c-header&quot;: require(&apos;../components/header.vue&apos;)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>至此，我们就能得到输入值了。<br><img src="/img/3.png" alt=""></p>
]]></content>
      
        
        <tags>
            
            <tag> vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vue.js 获取当前自定义属性值]]></title>
      <url>/2017/04/22/vue-js-%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B1%9E%E6%80%A7%E5%80%BC/</url>
      <content type="html"><![CDATA[<p>假设有一个标签h5, 我们给它添加了一个自定义属性值，（item.id是从动态添加的）<br>点击h5 标签，如何才能获取当前对应的自定义属性值呢？<br>想当然的我最开始这样写：<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;h5 class=&quot;left t-title&quot; @click=&apos;getDataId&apos; :data-id=&quot;item.id&quot;&gt;&lt;/h5&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">    methods: &#123;</div><div class="line">        getDataId() &#123;</div><div class="line">            console.log(this.data-id);</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">    </div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>显然，这样是拿不到 data-id的值的。。。。</p>
<p>应该这样做：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;h5 class=&quot;left t-title&quot; @click=&apos;getDataId(item.id)&apos; :data-id=&quot;item.id&quot;&gt;&lt;/h5&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">    methods: &#123;</div><div class="line">        getDataId(id) &#123;</div><div class="line">            console.log(id);</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">    </div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[完美解决 JS 返回上一页并刷新，但不用重新加载页面]]></title>
      <url>/2017/04/22/%E5%AE%8C%E7%BE%8E%E8%A7%A3%E5%86%B3-JS-%E8%BF%94%E5%9B%9E%E4%B8%8A%E4%B8%80%E9%A1%B5%E5%B9%B6%E5%88%B7%E6%96%B0%EF%BC%8C%E4%BD%86%E4%B8%8D%E7%94%A8%E9%87%8D%E6%96%B0%E5%8A%A0%E8%BD%BD%E9%A1%B5%E9%9D%A2/</url>
      <content type="html"><![CDATA[<h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>有三个页面A、B、C，点击A=&gt;B，点击B=&gt;C，在C中添加内容，点击确定返回到B，此时B页面需展示在C中添加的内容，同时，点击B页面的返回按钮需返回到A。（当然，A、B、C中都有返回按钮可以返回到之前的页面）<br><a id="more"></a></p>
<h3 id="分析需求"><a href="#分析需求" class="headerlink" title="分析需求"></a>分析需求</h3><p>显然，此需求有两个功能：<br>页面中的返回上一页功能<br>C中添加内容，返回B后刷新页面，同时保证B页面返回功能的正常使用</p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>针对第一个问题，我们很容易想到history.back()或者history.go(-1)</p>
<p>难点在第二个问题，最开始我是这样解决的：loacation.href = document.referrer，此时，B页面内容正确显示，但点击返回按钮却到了C。</p>
<p>分析原因，原来是loacation.href相当于重新加载了一次B页面，那么当前B页面的上一页自然就是C了。</p>
<p>有没有办法使得B页面不重新加载，但更新内容呢？</p>
<p>使用Ajax！！！浏览器加载页面后，会缓存HTML，每次加载页面都会执行一遍JS</p>
<p>1、C 页面点击确定后使用history.go(-1)，返回到B页面</p>
<p>2、在 B 页面通过$.ajax()获取内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">var xhr = $.ajax(&#123;</div><div class="line">  type: &apos;GET&apos;,</div><div class="line">  url: &apos;/api/xxx/xx&apos;,</div><div class="line">  timeout: 5000,</div><div class="line">  dataType: &apos;json&apos;,</div><div class="line">  beforeSend: function(XHR)&#123;</div><div class="line">    // todo</div><div class="line">  &#125;,</div><div class="line">  success: function(json)&#123;</div><div class="line">    //</div><div class="line">  &#125;,</div><div class="line">  error: function()&#123;&#125;,</div><div class="line">  complete: function(xhr,status)&#123;&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>3、重点，使用自执行函数渲染页面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">    function B()&#123;&#125;;</div><div class="line">    B.prototype.getData()&#123;</div><div class="line">      var xhr = $.ajax(&#123;...&#125;)</div><div class="line">    &#125;;</div><div class="line">    B.prototype.renderPage()&#123;</div><div class="line">      this.getDate();</div><div class="line">      // render...</div><div class="line">    &#125;;</div><div class="line">    !function(window)&#123;</div><div class="line">      var b = new B();</div><div class="line">      b.renderPage();</div><div class="line">    &#125;(window)</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>这下应该成了吧。NO! C点击确定后返回到B，B内容依然没有更新。。。</p>
<p>这是为什么呢？</p>
<p>百度搜索无果，情急之下只有求救大神</p>
<p>大神说，可能是GET请求发出后，由于URL没有变化，浏览器可能会从缓存中读取数据而导致内容更新失败。</p>
<ul>
<li><p>使用POST请求，强制从服务器获取数据</p>
</li>
<li><p>仍然使用GET，改变当前页面的url，方法是在url末尾添加一段随机字符串</p>
</li>
</ul>
<p>两种方法都能实现需求，这里再说说方法二：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">var xhr = $.ajax(&#123;</div><div class="line">  type: &apos;GET&apos;,</div><div class="line">  url: &apos;/api/xxx/xx&apos;,</div><div class="line">  timeout: 5000,</div><div class="line">  dataType: &apos;json&apos;,</div><div class="line">  data: &#123;flag: new Data().getTime().toString(36)&#125;, // 在GET方法内添加一个任意key，随机字符串改变</div><div class="line">  beforeSend: function(XHR)&#123;</div><div class="line">    // todo</div><div class="line">  &#125;,</div><div class="line">  success: function(json)&#123;</div><div class="line">    //</div><div class="line">  &#125;,</div><div class="line">  error: function()&#123;&#125;,</div><div class="line">  complete: function(xhr,status)&#123;&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p><img src="/img/1.png" alt=""></p>
]]></content>
      
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[wxss引用外部CSS文件及iconfont]]></title>
      <url>/2017/04/22/wxss%E5%BC%95%E7%94%A8%E5%A4%96%E9%83%A8CSS%E6%96%87%E4%BB%B6%E5%8F%8Aiconfont/</url>
      <content type="html"><![CDATA[<p>小程序引入外部文件的方式是：@import “<em>/</em>.wxss”;</p>
<p>因为业务需要，正在开发的小程序中需要使用iconfont，很容易想到了H5的引入方式：<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">@font-face &#123;font-family: &quot;iconfont&quot;;</div><div class="line">  src: url(&apos;iconfont.eot?t=1485242349767&apos;); /* IE9*/</div><div class="line">  src: url(&apos;iconfont.eot?t=1485242349767#iefix&apos;) format(&apos;embedded-opentype&apos;), /* IE6-IE8 */</div><div class="line">  url(&apos;iconfont.woff?t=1485242349767&apos;) format(&apos;woff&apos;), /* chrome, firefox */</div><div class="line">  url(&apos;iconfont.ttf?t=1485242349767&apos;) format(&apos;truetype&apos;), /* chrome, firefox, opera, Safari, Android, iOS 4.2+*/</div><div class="line">  url(&apos;iconfont.svg?t=1485242349767#iconfont&apos;) format(&apos;svg&apos;); /* iOS 4.1- */</div><div class="line">&#125;</div><div class="line"></div><div class="line">.iconfont &#123;</div><div class="line">  font-family:&quot;iconfont&quot; !important;</div><div class="line">  font-size:16px;</div><div class="line">  font-style:normal;</div><div class="line">  -webkit-font-smoothing: antialiased;</div><div class="line">  -moz-osx-font-smoothing: grayscale;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>因为此段css样式是通用的，就把它放在了lib/style/font.wxss中，此时文件目录如下：</p>
<p><img src="/img/引入外部css/1.png" alt=""></p>
<p>通过@import 的方式引入到需要用到的文件里，但是并没有效果。</p>
<p>原因：小程序的wxss文件font-face的url不接受http地址作为参数,可以接受base64,因此可以先将字体文件下载后,转换为base64，然后引用。</p>
<p>解决方案如下：</p>
<p>一、先到阿里巴巴矢量图标库(<a href="http://iconfont.cn/)生成自己的字体图标，并下载下来，找到ttf格式文件" target="_blank" rel="external">http://iconfont.cn/)生成自己的字体图标，并下载下来，找到ttf格式文件</a></p>
<p><img src="/img/引入外部css/2.png" alt=""></p>
<p>二、到这个平台<a href="https://transfonter.org/，把字体文件转化成base64格式" target="_blank" rel="external">https://transfonter.org/，把字体文件转化成base64格式</a></p>
<p><img src="/img/引入外部css/3.png" alt=""></p>
<p>三、在lib文件中引入</p>
<p><img src="/img/引入外部css/4.png" alt=""></p>
<p>四、在wxss加入字体</p>
<p><img src="/img/引入外部css/5.png" alt=""></p>
<p>五、显示效果</p>
<p><img src="/img/引入外部css/6.png" alt=""></p>
]]></content>
      
        
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[事件代理/事件委托（event delegation）]]></title>
      <url>/2017/04/22/%E4%BA%8B%E4%BB%B6%E4%BB%A3%E7%90%86%E5%92%8C%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98/</url>
      <content type="html"><![CDATA[<p><strong>需求一：</strong>当一个div内部有多个事件发生，给每个元素逐个添加事件十分麻烦…</p>
<p><strong>需求二：</strong>在项目中我们常常需要动态的添加元素，不可避免的需要为那些未来添加的元素增加事件…<br><a id="more"></a><br><strong>我们：</strong>怎么办呢？</p>
<p><strong>事件委托：</strong>我可以！使用我能让你避免对特定的每个节点添加事件监听器。</p>
<p><strong>我们：</strong>你到底是什么鬼？ </p>
<p><strong>事件委托：</strong>我又叫事件代理，说白了就是利用浏览器事件捕获和冒泡的原理，将事件监听器添加到特定节点的父元素上，我就会分析从子元素冒泡上来的事件，找到是哪个子元素的事件。</p>
<p>举个栗子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$(parentsEle).click(function (e) &#123;</div><div class="line">    var e = e || window.event,</div><div class="line">        targetEle = e.target || e.srcElement,</div><div class="line">        _this = this;</div><div class="line">    switch (targetEle.className) &#123;</div><div class="line">        case &quot;font_r&quot;:</div><div class="line">            $(targetEle).fadeOut();</div><div class="line">            _this.siblings(&quot;.header&quot;).fadeIn();</div><div class="line">            break;</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>明白了吗？</p>
]]></content>
      
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[函数的创建和重载]]></title>
      <url>/2017/04/22/%E5%87%BD%E6%95%B0%E5%88%9B%E5%BB%BA%E5%92%8C%E9%87%8D%E8%BD%BD/</url>
      <content type="html"><![CDATA[<p>今天做一个关注/取消的功能，由于需要向后台发送请求，想通过控制用户点击发送的频次减少不必要的请求，即在一定时间内，用户点击多次但只发送一次数据，自然而然想到了使用【函数节流】。<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">function throttle2(method, context) &#123;</div><div class="line">    clearTimeout(method.tId);</div><div class="line">    method.tId = setTimeout(function()&#123;</div><div class="line">        method.call(context);</div><div class="line">    &#125;, 1000);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>但在实际应用中，并不能达到想要效果–每次点击都会发送一次数据，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">$(&quot;.daili_act_lia&quot;).click(function () &#123;</div><div class="line">    var checkbox = $(&quot;#s11&quot;),</div><div class="line">      options = &#123;&#125;,</div><div class="line">      isFocus = &apos;&apos;,</div><div class="line">         id = $(this).attr(&quot;data-id&quot;);</div><div class="line"></div><div class="line">             function throttle2(method, context) &#123;</div><div class="line">                 clearTimeout(method.tId);</div><div class="line">                 method.tId = setTimeout(function()&#123;</div><div class="line">                     method.call(context);</div><div class="line">                 &#125;, 1000);</div><div class="line">             &#125;</div><div class="line"></div><div class="line">             function myAjax() &#123;</div><div class="line">                 if(checkbox.prop(&quot;checked&quot;)) &#123;</div><div class="line">                     isFoucs = -1;</div><div class="line">                 &#125;else &#123;</div><div class="line">                     isFoucs = &apos;&apos;;</div><div class="line">                 &#125;</div><div class="line">                 options = &#123;</div><div class="line">                     focusId: id,</div><div class="line">                     tag: 2,</div><div class="line">                     focus: isFocus</div><div class="line">                 &#125;;</div><div class="line">                 console.log(options)</div><div class="line">                 function returnDate(json) &#123;</div><div class="line">                     console.log(json)</div><div class="line">                 &#125;</div><div class="line">                 Utils.getAjax(&quot;POST&quot;, CONFIG.API.editFocus, options, returnDate);</div><div class="line">             &#125;</div><div class="line">             throttle2(myAjax,this)</div><div class="line">         &#125;);</div></pre></td></tr></table></figure>
<p>一直不明白为什么。。。</p>
<p>最后把throttle函数修改为以下就成功了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">function throttle2(method, context) &#123;</div><div class="line">    clearTimeout(context.tId);</div><div class="line">    context.tId = setTimeout(function()&#123;</div><div class="line">        method.call(context);</div><div class="line">    &#125;, 1000);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>仔细分析，原来是每次 click 的时候，都重新创建了函数 ‘method’（本例中的 myAjax 函数），那么throttle在内部永远保存着一个定时器不会被清除。才会出现每次点击都会执行method的现象。</p>
<p><strong>结论：</strong><br>1、 创建函数的方式<br>　　1.1 function fn(){}  函数声明<br>　　1.2 var fn = function(){} 函数表达式<br>2、 函数名是一个指向函数对象的指针，每创建一个函数，都会在内存重新分配一个地址，即使拥有相同的函数名，他们也不是同一个函数。<br>3、 JavaScript 中，没有函数重载。</p>
]]></content>
      
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[快速搭建微信小程序开发环境]]></title>
      <url>/2017/04/22/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
      <content type="html"><![CDATA[<p>1.工具软件：</p>
<p>注：本文介绍的工具软件已分享到百度云盘，直接下载并按照本文介绍安装即可。</p>
<a id="more"></a>
<p>开发工具 v0.7</p>
<p>百度云链接: <a href="https://pan.baidu.com/s/1jIQ7i8A密码" target="_blank" rel="external">https://pan.baidu.com/s/1jIQ7i8A密码</a>: aqn4<br>开发工具 v0.9</p>
<p>百度云链接: <a href="https://pan.baidu.com/s/1o7IHoN4" target="_blank" rel="external">https://pan.baidu.com/s/1o7IHoN4</a> 密码: r9c4<br>Demo源代码</p>
<p>百度云链接: <a href="https://pan.baidu.com/s/1o7T67ai" target="_blank" rel="external">https://pan.baidu.com/s/1o7T67ai</a> 密码: dp44</p>
<p> <img src="/img/20160923152531991.png" alt=""></p>
<p>2.搭建步骤：</p>
<p>1）、安装0.7 — 扫码登陆 — 关闭0.7<br>2）、安装0.9 ——不要启动程序——替换以下文件<br>文件在weapp-ide-crack-master文件夹中<br>替换目录<br>F:\Program Files (x86)\Tencent\微信web开发者工具\package.nw\app\dist\weapp\appservice\asdebug.js<br>F:\Program Files (x86)\Tencent\微信web开发者工具\package.nw\app\dist\components\create\createstep.js<br>F:\Program Files (x86)\Tencent\微信web开发者工具\package.nw\app\dist\stroes\projectStores.js<br>3）、打开0.9——新建项目：appid和名称随便填，路径选demo的路径</p>
<p>3.常见问题：</p>
<p>找不到所要替换的文件<br>问题原因：开发工具版本不正确，老版本不支持<br>解决方案：确保下载的程序版本在0.9.092100以上<br>Failed to load resource: net::ERR_NAME_NOT_RESOLVED <a href="http://1709827360.appservice.open.weixin.qq.com/appservice" target="_blank" rel="external">http://1709827360.appservice.open.weixin.qq.com/appservice</a><br>问题原因：通常是由于系统设置了代理如Shadowsocks等。<br>解决方案：关闭代理，或者依次点击工具栏“动作”-“设置”，选择“不使用任何代理，勾选后直连网络”。<br>修复asdebug.js报错<br>问题原因：TypeError: Cannot read property ‘MaxRequestConcurrent’ of undefined<br>解决方案：替换 /Resources/app.nw/app/dist/weapp/appservice/asdebug.js<br>扫码登录失败<br>问题原因：please bind your wechat account to the appid first<br>解决方案：先使用0.7版本的进行扫码登陆，登陆成功后，再用0.9的版本打开就直接进入了<br>百度云链接: <a href="https://pan.baidu.com/s/1jIQ7i8A" target="_blank" rel="external">https://pan.baidu.com/s/1jIQ7i8A</a> 密码: aqn4</p>
<p>invalid appid</p>
<p>如果按照教程安装扔出现上述问题，建议将原0.7和0.9版本卸载干净后再重新安装，记得使用替换以下文件：<br>链接: <a href="https://pan.baidu.com/s/1pLzY7yV" target="_blank" rel="external">https://pan.baidu.com/s/1pLzY7yV</a> 密码: tkwb<br>C:\Program Files (x86)\Tencent\微信web开发者工具\package.nw\app\dist\weapp\appservice\asdebug.js<br>C:\Program Files (x86)\Tencent\微信web开发者工具\package.nw\app\dist\components\create\createstep.js<br>C:\Program Files (x86)\Tencent\微信web开发者工具\package.nw\app\dist\stroes\projectStores.js</p>
<p>参考链接：</p>
<p>“小程序”破解IDE + Demo：<a href="https://github.com/gavinkwoe/weapp-ide-crack.git" target="_blank" rel="external">https://github.com/gavinkwoe/weapp-ide-crack.git</a><br>资源汇总：<a href="https://github.com/Aufree/awesome-wechat-weapp" target="_blank" rel="external">https://github.com/Aufree/awesome-wechat-weapp</a><br>官方简易教程·MINA：<a href="http://wxopen.notedown.cn/" target="_blank" rel="external">http://wxopen.notedown.cn/</a><br>Hello小程序 - 非官方：<a href="http://www.helloxcx.com" target="_blank" rel="external">http://www.helloxcx.com</a><br>微信应用号开发教程：<a href="https://my.oschina.net/wwnick/blog/750055" target="_blank" rel="external">https://my.oschina.net/wwnick/blog/750055</a></p>
]]></content>
      
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
